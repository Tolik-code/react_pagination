{"version":3,"sources":["Components/Pagination.jsx","App.js","index.js"],"names":["Pagination","prevPage","nextPage","total","firstVisiblePage","withInfo","onPageChange","page","perPage","list","createButton","currentPage","className","type","onClick","i","push","key","createButtonList","index","content","splice","length","disabled","map","elem","defaultProps","App","state","selectedPage","setState","onPerPageChange","target","value","this","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sOAIaA,G,YAAa,SAAC,GAuBzB,IAnBK,IAHLC,EAGI,EAHJA,SAAUC,EAGN,EAHMA,SAAUC,EAGhB,EAHgBA,MACpBC,EAEI,EAFJA,iBAAkBC,EAEd,EAFcA,SAClBC,EACI,EADJA,aAAcC,EACV,EADUA,KAAMC,EAChB,EADgBA,QAEdC,EAAO,GAEPC,EAAe,SAAAC,GAAW,OAC9B,4BACEC,UAAWD,KAAiBJ,EACxB,8BACA,YACJM,KAAK,SACLC,QAAS,WACHH,KAAiBJ,GACnBD,EAAaK,KAIhBA,IAIII,EAAIX,EAAkBW,GAAKX,EAAmBI,EAAU,EAAGO,IAAK,CACvE,IAAMJ,EAAcI,EAUpB,GARAN,EAAKO,KACH,wBACEC,IAAKN,GAEJD,EAAaC,KAIdR,EAAQY,EAAI,EACd,MAIJ,IAAMG,EAAmB,SAACC,EAAOC,GAC/BX,EAAKY,OAAOF,EAAO,EACjB,4BACGT,EAAaU,MAcpB,OAVyB,IAArBhB,IACFc,EAAiB,EAAG,OACpBA,EAAiB,EAAG,IAGlBf,EAAQC,EAAmBI,IAC7BU,EAAiBT,EAAKa,OAAQ,OAC9BJ,EAAiBT,EAAKa,OAAQnB,IAI9B,oCAEEE,GAEA,sCACQD,EADR,0BAEMA,EAAmBI,EAAU,EAAIL,EAC/BA,EACAC,EAAmBI,EAAU,EAJrC,0BAKSL,IAIT,4BACEU,KAAK,SACLC,QAASb,EACTW,UAAU,cACVW,SAA+B,IAArBnB,GAJZ,QAQA,wBAAIQ,UAAU,cACXH,EAAKe,KAAI,SAAAC,GAAI,OAAIA,MAEpB,4BACEZ,KAAK,SACLC,QAASZ,EACTU,UAAU,cACVW,SAAUnB,EAAmBI,EAAUL,GAJzC,WAuBNH,EAAW0B,aAAe,CACxBrB,UAAU,G,IC5BGsB,E,4MA5EbC,MAAQ,CACNC,aAAc,EACdzB,iBAAkB,EAClBD,MAAO,GACPK,QAAS,EACTH,UAAU,G,EAGZH,SAAW,WACL,EAAK0B,MAAMxB,iBAAmB,EAAKwB,MAAMpB,QAAU,EAAKoB,MAAMzB,OAIlE,EAAK2B,UAAS,SAAAF,GAAK,MAAK,CACtBxB,iBAAkBwB,EAAMxB,iBAAmBwB,EAAMpB,a,EAIrDP,SAAW,WAC2B,IAAhC,EAAK2B,MAAMxB,kBAIf,EAAK0B,UAAS,SAACF,GAKb,MAAQ,CACNxB,iBALkBwB,EAAMxB,iBAAmBwB,EAAMpB,QAAU,EACzD,EACAoB,EAAMxB,iBAAmBwB,EAAMpB,a,EAQvCF,aAAe,SAACC,GACd,EAAKuB,SAAS,CACZD,aAActB,K,EAIlBwB,gBAAkB,YAAiB,IAAdC,EAAa,EAAbA,QACdA,EAAOC,QAAU,EAAKL,MAAMpB,SAC/B,EAAKsB,SAAS,CACZtB,SAAUwB,EAAOC,S,4CAKvB,WACE,MAAuDC,KAAKN,MAApDzB,EAAR,EAAQA,MAAOK,EAAf,EAAeA,QAASJ,EAAxB,EAAwBA,iBAAkBC,EAA1C,EAA0CA,SAE1C,OACE,oCACE,0CACA,4BAAQ4B,MAAOzB,EAAS2B,SAAUD,KAAKH,iBACrC,4BAAQE,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,OAGF,kBAAC,EAAD,CACE7B,iBAAkBA,EAClBH,SAAUiC,KAAKjC,SACfC,SAAUgC,KAAKhC,SACfI,aAAc4B,KAAK5B,aACnBH,MAAOA,EACPK,QAASA,EACTD,KAAM2B,KAAKN,MAAMC,aACjBxB,SAAUA,S,GAtEF+B,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c9d5893a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Pagination.css';\n\nexport const Pagination = ({\n  prevPage, nextPage, total,\n  firstVisiblePage, withInfo,\n  onPageChange, page, perPage,\n}) => {\n  const list = [];\n\n  const createButton = currentPage => (\n    <button\n      className={currentPage === +page\n        ? 'list-page--active list-page'\n        : 'list-page'}\n      type=\"button\"\n      onClick={() => {\n        if (currentPage !== +page) {\n          onPageChange(currentPage);\n        }\n      }}\n    >\n      {currentPage}\n    </button>\n  );\n\n  for (let i = firstVisiblePage; i <= firstVisiblePage + perPage - 1; i++) {\n    const currentPage = i;\n\n    list.push(\n      <li\n        key={currentPage}\n      >\n        {createButton(currentPage)}\n      </li>\n    );\n\n    if (total < i + 1) {\n      break;\n    }\n  }\n\n  const createButtonList = (index, content) => {\n    list.splice(index, 0,\n      <li>\n        {createButton(content)}\n      </li>);\n  };\n\n  if (firstVisiblePage !== 1) {\n    createButtonList(0, '...');\n    createButtonList(0, 1);\n  }\n\n  if (total > firstVisiblePage + perPage) {\n    createButtonList(list.length, '...');\n    createButtonList(list.length, total);\n  }\n\n  return (\n    <>\n      {\n      withInfo\n      && (\n      <h2>\n          {`${firstVisiblePage} - \n          ${firstVisiblePage + perPage - 1 > total\n            ? total\n            : firstVisiblePage + perPage - 1}\n          of ${total}`}\n      </h2>\n      )\n      }\n      <button\n        type=\"button\"\n        onClick={prevPage}\n        className=\"list-bottom\"\n        disabled={firstVisiblePage === 1}\n      >\n        prev\n      </button>\n      <ul className=\"list-pages\">\n        {list.map(elem => elem)}\n      </ul>\n      <button\n        type=\"button\"\n        onClick={nextPage}\n        className=\"list-bottom\"\n        disabled={firstVisiblePage + perPage > total}\n      >\n        next\n      </button>\n    </>\n  );\n};\n\nPagination.propTypes = {\n  prevPage: PropTypes.func.isRequired,\n  nextPage: PropTypes.func.isRequired,\n  total: PropTypes.number.isRequired,\n  firstVisiblePage: PropTypes.number.isRequired,\n  withInfo: PropTypes.bool,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  perPage: PropTypes.number.isRequired,\n};\n\nPagination.defaultProps = {\n  withInfo: true,\n};\n","import React from 'react';\nimport './App.css';\nimport { Pagination } from './Components/Pagination';\n\nclass App extends React.Component {\n  state = {\n    selectedPage: 1,\n    firstVisiblePage: 1,\n    total: 42,\n    perPage: 5,\n    withInfo: true,\n  }\n\n  nextPage = () => {\n    if (this.state.firstVisiblePage + this.state.perPage > this.state.total) {\n      return;\n    }\n\n    this.setState(state => ({\n      firstVisiblePage: state.firstVisiblePage + state.perPage,\n    }));\n  }\n\n  prevPage = () => {\n    if (this.state.firstVisiblePage === 1) {\n      return;\n    }\n\n    this.setState((state) => {\n      const currentPage = state.firstVisiblePage - state.perPage < 1\n        ? 1\n        : state.firstVisiblePage - state.perPage;\n\n      return ({\n        firstVisiblePage: currentPage,\n      });\n    });\n  };\n\n  onPageChange = (page) => {\n    this.setState({\n      selectedPage: page,\n    });\n  };\n\n  onPerPageChange = ({ target }) => {\n    if (+target.value !== this.state.perPage) {\n      this.setState({\n        perPage: +target.value,\n      });\n    }\n  };\n\n  render() {\n    const { total, perPage, firstVisiblePage, withInfo } = this.state;\n\n    return (\n      <>\n        <h1>Pagination</h1>\n        <select value={perPage} onChange={this.onPerPageChange}>\n          <option value=\"3\">3</option>\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"20\">20</option>\n        </select>\n\n        <Pagination\n          firstVisiblePage={firstVisiblePage}\n          prevPage={this.prevPage}\n          nextPage={this.nextPage}\n          onPageChange={this.onPageChange}\n          total={total}\n          perPage={perPage}\n          page={this.state.selectedPage}\n          withInfo={withInfo}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}